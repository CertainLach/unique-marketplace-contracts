const { assert } = require("console");


const MarketPlace = artifacts.require('MarketPlace.sol');

const Token721 = artifacts.require('ERC721example.sol');
const MPAddr = require('../addressesOpal2012.json')
var mpKSM, t721, idNFT;
//const idNFT = 1235;
const price = 1000;
const depoSum = 1500;
const addrKSM = web3.utils.toChecksumAddress("0x0000000000000000000000000000000000000002")
const contr = require("../contr.json")



module.exports = async function(deployer,_network, addresses) {

    if (contr.ERC721 =="") {
        t721 = await Token721.new("CryptoPunk1", "CP1");
    }
    else {
        t721 = await Token721.at(contr.ERC721)
    }
    idNFT = contr.tokenID + 1;
    await t721.mint(addresses[0], idNFT);
    
        let fs = require('fs');
        fs.writeFile("./contr.json", JSON.stringify({ "ERC721": t721.address, "tokenID": idNFT, "account": addresses[0], "price": price }), function (err) {
            if (err) {
                console.log(err);
            }
        });
    
        
            const networkId = await web3.eth.net.getId();

            mpKSM = await MarketPlace.at(MPAddr[networkId].marketplace);
            await t721.approve(mpKSM.address, idNFT);
            await mpKSM.addAsk(price, //price
                addrKSM, //_currencyCode
                //            0x8d268ccc5844851e91bed6fe63457d1202c20719
                //0x0000000000000000000000000000000000000002
                t721.address, //_idCollection
                idNFT,

            );

            assert(mpKSM.address == await t721.ownerOf(idNFT), "mpKSM.address !=  t721.ownerOf(idNFT)");
            const askID = await mpKSM.asks(t721.address, idNFT);
            const order = await mpKSM.orders(askID);
            assert(order.idNFT.toNumber() == idNFT, "order.idNFT. !=  idNFT");

         /*,
     it ("3. make deposit", async () => { 

        await  mpKSM.depositKSM (  depoSum, //
                         //_currencyCode
                        addresses[0], //sender
                         );
        const balanceKSM = await mpKSM.balanceKSM(addresses[0])
   //     console.log ("balanceKSM", balanceKSM.toNumber());
       assert (depoSum ==  balanceKSM.toNumber(), "depoSum !=  balanceKSM");

    }),

    it ("4. buying", async () => { 

      await  mpKSM.buyKSM (t721.address, //_idCollection
                         idNFT);
    
      const balanceKSM = await mpKSM.balanceKSM(addresses[0])
       assert (depoSum - price == balanceKSM.toNumber(), "depoSum - price !=  balanceKSM");
      const askID = await mpKSM.asks( t721.address, idNFT);
      const order = await mpKSM.orders(askID);
       assert (order.flagActive.toNumber() == 0, "order.flagActive != 0");
       assert (addresses[0] == await t721.ownerOf(idNFT), "addresses[0] != t721.ownerOf(idNFT)");


    }) //, 

     it ("5. withdrawing", async () => { 

        await  mpKSM.withdrawAllKSM (addresses[0]);
      
        const balanceKSM = await mpKSM.balanceKSM(addresses[0])
         assert ( balanceKSM.toNumber() == 0, " balanceKSM != 0");
  
  
      })
  */
    };
